---
  - name: Install WebUpd8 apt key
    apt_key: id=EEA14886 keyserver='keyserver.ubuntu.com' state=present
    tags: preconfig

  - name: Install WebUpd8 Team Java PPA (for Oracle Java)
    apt_repository: repo='{{item}}' state=present update_cache=yes
    sudo: yes
    with_items:
      - deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main
      - deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main
    tags: preconfig
    
  - name: Accept Oracle License
    debconf: name=oracle-java8-installer question='shared/accepted-oracle-license-v1-1' value='true' vtype='select'
    tags: preconfig

  - name: Install Java packages
    apt: pkg={{ item }} state=latest update_cache=yes
    with_items:
       - oracle-java8-installer
       - oracle-java8-set-default
    tags: preconfig

  - name: Install kamaki
    apt: pkg={{ item }} state=latest update_cache=yes
    with_items:
       - kamaki
    tags: preconfig

  - name: Disable ipv6
    sysctl: "name={{item.name}} value={{item.value}} state={{item.state}}"
    tags: preconfig
    with_items:
       - { name: 'net.ipv6.conf.all.disable_ipv6', value: '1', state: 'present' }
       - { name: 'net.ipv6.conf.default.disable_ipv6', value: '1', state: 'present' }
       - { name: 'net.ipv6.conf.lo.disable_ipv6', value: '1', state: 'present' }

  - name: Change ssh_config to ssh from master with no StrictHostKeyCheck,command1
    lineinfile: dest=/etc/ssh/ssh_config regexp='ask' line='StrictHostKeyChecking no' state=present
    tags: preconfig

  - name: Change ssh_config to ssh from master with no StrictHostKeyCheck,command2
    lineinfile: dest=/etc/ssh/ssh_config line='UserKnownHostsFile=/dev/null' insertafter='EOF' state=present
    tags: preconfig

  - name: Remove second line of /etc/hosts
    lineinfile: dest=/etc/hosts regexp='^127\.0\.1\.1' state=absent
    tags: preconfig

  - name: download hadoop-yarn src
    tags: preconfig
    get_url: dest={{path_to_hadoop}} url={{yarn_common_url}}/{{ hadoop_latest_stable }}.tar.gz

  - name: unzip hadoop-yarn src
    tags: preconfig
    unarchive: src={{path_to_hadoop}}/{{ hadoop_latest_stable }}.tar.gz dest=/usr/local copy=no owner=root group=root

  - name: Add virtual machine private ips in /etc/hosts
    template: src=hosts.j2 dest={{etchosts_filename}}
    tags: postconfig

  - name: Append the host file
    shell: cat {{etchosts_filename}} >> /etc/hosts
    tags: postconfig

  - name: create hadoop group
    group: name=hadoop state=present
    tags: postconfig

  - name: create hadoop user
    user: name=hduser group=hadoop generate_ssh_key=yes shell=/bin/bash
    tags: postconfig

  - name: chown of hue bin directory
    file: path=/usr/local/hue owner=hduser group=hadoop state=directory recurse=yes
    tags: hueconfig

  - name: Remove Hue obsolete directory
    shell: rm -rf hue-*
    tags: hueconfig

  - name: Remove Hadoop .tar.gz file
    shell: rm -f hadoop-*.tar.gz chdir={{path_to_hadoop}}
    tags: postconfig

  - stat: path="{{ ssh_file_name }}"
    tags: postconfig
    register: p
    delegate_to: 127.0.0.1

  - name: copy app user authorized_keys to hduser .ssh directory
    tags: postconfig
    authorized_key: user=hduser key="{{ item }}"
    with_file:
      - "{{ ssh_file_name }}"
    when: p.stat.exists

  - name: copy server authorized_keys to hduser .ssh directory
    tags: postconfig
    authorized_key: user=hduser key="{{ item }}"
    with_file:
      - "{{ path | expanduser }}"

  - name: create master vm root user ssh key
    user: name=root generate_ssh_key=yes shell=/bin/bash state=present
    tags: postconfig
    when: is_master

  - name: change owner of hduser auth keys file
    tags: postconfig
    file: path={{hadoopuser_path}}/.ssh/authorized_keys owner=hduser group=hadoop mode=0600
    when: p.stat.exists

  - name: prepare ssh 
    tags: postconfig
    shell: sudo -u hduser cat {{hadoopuser_path}}/.ssh/id_rsa.pub >> {{hadoopuser_path}}/.ssh/authorized_keys
    when: is_master

  - name: copy master hduser public ssh key to local box
    tags: postconfig
    fetch: src={{hadoopuser_path}}/.ssh/id_rsa.pub dest=/tmp/{{master_key_hduser}} flat=yes
    when: is_master

  - name: copy master root public ssh key to local box
    tags: postconfig
    fetch: src=/root/.ssh/id_rsa.pub dest=/tmp/{{master_key_root}} flat=yes
    when: is_master

  - name: copy local box master hduser ssh key to hduser
    tags: postconfig
    authorized_key: user=hduser key="{{ item }}"
    with_file:
      - /tmp/{{master_key_hduser}}
    when: is_slave

  - name: copy local box master root ssh key to root every VM
    tags: postconfig
    authorized_key: user=root key="{{ item }}"
    with_file:
      - /tmp/{{master_key_root}}
    when: is_slave

  - name: Rename hadoop directory
    tags: postconfig
    shell: mv {{path_to_hadoop}}/{{yarn_version}} {{hadoop_home}}

  - name: chown hadoop-src from root to hadoop group
    tags: postconfig
    file: path={{hadoop_home}} state=directory owner=hduser group=hadoop recurse=yes

  - name: update ~/.bashrc and hadoop-env.sh files
    tags: postconfig
    lineinfile: "dest={{item.dest}} state={{item.state}} insertafter={{item.insertafter}} line={{item.line}}"
    with_items:
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_HOME=/usr/local/hadoop'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export JAVA_HOME=/usr/lib/jvm/java-8-oracle'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_INSTALL=/usr/local/hadoop'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_PREFIX=/usr/local/hadoop'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$HADOOP_INSTALL/bin'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$HADOOP_INSTALL/sbin'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_MAPRED_HOME=$HADOOP_INSTALL'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_COMMON_HOME=$HADOOP_INSTALL'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_HDFS_HOME=$HADOOP_INSTALL'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export YARN_HOME=$HADOOP_INSTALL'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_OPTS=-Djava.net.preferIPv4Stack=true'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_CONF_DIR=$HADOOP_INSTALL/etc/hadoop'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export FLUME_HOME={{flume_home}}'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export FLUME_CONF_DIR=$FLUME_HOME/conf'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export FLUME_CLASS_PATH=$FLUME_CONF_DIR'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$FLUME_HOME/bin'" }
      - { dest: '/usr/local/hadoop/etc/hadoop/hadoop-env.sh', state: 'present', insertafter: 'EOF', line: '"export JAVA_HOME=/usr/lib/jvm/java-8-oracle"' }
      - { dest: '/usr/local/hadoop/etc/hadoop/hadoop-env.sh', state: 'present', insertafter: 'EOF', line: '"export HADOOP_PREFIX=/usr/local/hadoop"' }

  - name: update ~/.bashrc and hbase-env.sh files for ecosystem
    tags: ecoconfig
    lineinfile: "dest={{item.dest}} state={{item.state}} insertafter={{item.insertafter}} line={{item.line}}"
    with_items:
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HIVE_HOME=/usr/local/hive'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$HIVE_HOME/bin:$PATH'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=/usr/local/pig/bin/:$PATH'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export HBASE_HOME=/usr/local/hbase'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$HBASE_HOME/bin'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export SPARK_HOME=/usr/local/spark'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$SPARK_HOME/bin'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export OOZIE_HOME=/usr/local/oozie'" }
      - { dest: '/home/hduser/.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$OOZIE_HOME/bin'" }
      - { dest: '.bashrc', state: 'present', insertafter: 'EOF', line: "'export SPARK_HOME=/usr/local/spark'" }
      - { dest: '.bashrc', state: 'present', insertafter: 'EOF', line: "'export PATH=$PATH:$SPARK_HOME/bin'" }
      - { dest: '.bashrc', state: 'present', insertafter: 'EOF', line: "'export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop'" }
      - { dest: '/usr/local/hbase/conf/hbase-env.sh', state: 'present', insertafter: 'EOF', line: '"export JAVA_HOME=/usr/lib/jvm/java-8-oracle/"' }

  - name: Copy Java lib directory
    tags: postconfig
    copy: src=lib/ dest={{path_to_common_libs}} owner=hduser group=hadoop

  - name: Copy Java dist directory
    tags: postconfig
    copy: src=dist/ dest={{path_to_hdfs_libs}} owner=hduser group=hadoop

  - name: Delete .gitignore
    tags: postconfig
    shell: find -name '.gitignore' | xargs rm chdir={{hadoop_home}}

  - name: create app/hadoop/tmp to store HDFS and Flume Home configuration folder for Debian Base
    tags: postconfig
    action: command {{item}}
    with_items:
      - mkdir -p /app/hadoop/tmp
      - chown hduser:hadoop /app/hadoop/tmp
      - chmod 750 /app/hadoop/tmp
      - mkdir -p {{flume_home}}/conf

  - name: copy yarn configuration xml and kamakirc files in every node
    tags: postconfig
    template: "src={{item.src}} dest={{item.dest}} owner={{item.owner}} group={{item.group}}"
    with_items:
      - { src: 'core-site.j2', dest: '/usr/local/hadoop/etc/hadoop/core-site.xml', owner: 'hduser', group: 'hadoop' }
      - { src: 'mapred-site.j2', dest: '/usr/local/hadoop/etc/hadoop/mapred-site.xml', owner: 'hduser', group: 'hadoop' }
      - { src: 'hdfs-site.j2', dest: '/usr/local/hadoop/etc/hadoop/hdfs-site.xml', owner: 'hduser', group: 'hadoop' }
      - { src: 'yarn-site.j2', dest: '/usr/local/hadoop/etc/hadoop/yarn-site.xml', owner: 'hduser', group: 'hadoop' }
      - { src: 'kamakirc.j2', dest: '/home/hduser/.kamakirc', owner: 'hduser', group: 'hadoop' }
      - { src: 'flume.j2', dest: '{{flume_home}}/conf/flume.conf', owner: 'hduser', group: 'hadoop' }

  - name: Change ownership to hduser for flume
    tags: postconfig
    file: path={{item.path}} owner={{item.owner}} group={{item.group}} recurse=yes state=directory
    with_items:
      - { path: '{{flume_home}}', owner: 'hduser', group: 'hadoop' }
      - { path: '/var/log/flume', owner: 'hduser', group: 'hadoop' }
      - { path: '/var/run/flume', owner: 'hduser', group: 'hadoop' }

  - name: Copy Flume services to /etc/init.d
    tags: postconfig
    copy: "src={{item.src}} dest={{item.dest}} mode={{item.mode}}"
    with_items:
      - { src: 'flume-agent', dest: '/etc/init.d/flume-agent', mode: '0755' }
      - { src: 'flume-agent.service', dest: '/lib/systemd/system/flume-agent.service', mode: '644' }
    when: is_master

  - name: copy hue.ini in master node
    tags: hueconfig
    template: src=hue.j2 dest={{ hue_home }}/desktop/conf/hue.ini owner=hduser group=hadoop
    when: is_master
    
  - name: copy hue_login.py in master node
    tags: hueconfig
    template: src=hue_login.j2 dest={{ hue_home }}/build/env/bin/hue_login.py owner=hduser group=hadoop
    when: is_master

  - name: copy ecosystem xml files
    tags: ecoconfig
    template: "src={{item.src}} dest={{item.dest}} owner={{item.owner}} group={{item.group}}"
    with_items:
      - { src: 'regionservers.j2', dest: '/usr/local/hbase/conf/regionservers', owner: 'hduser', group: 'hadoop' }
      - { src: 'regionservers.j2', dest: '/usr/local/hadoop/etc/hadoop/regionservers', owner: 'hduser', group: 'hadoop' }
      - { src: 'hbase-site.j2', dest: '/usr/local/hbase/conf/hbase-site.xml', owner: 'hduser', group: 'hadoop' }
      - { src: 'hive-site.j2', dest: '/usr/local/hive/conf/hive-site.xml', owner: 'hduser', group: 'hadoop' }

  - name: create masters and slaves files in hadoop-yarn master node (and create include file)
    tags: postconfig
    template: "src={{item.src}} dest={{item.dest}} owner={{item.owner}} group={{item.group}}"
    with_items:
      - { src: 'masters.j2', dest: '/usr/local/hadoop/etc/hadoop/masters', owner: 'hduser', group: 'hadoop' }
      - { src: 'slaves.j2', dest: '/usr/local/hadoop/etc/hadoop/slaves', owner: 'hduser', group: 'hadoop' }
      - { src: 'slaves.j2', dest: '/usr/local/hadoop/etc/hadoop/include', owner: 'hduser', group: 'hadoop' }
    when: is_master

  - name: Create empty exclude file
    tags: postconfig
    file: path=/usr/local/hadoop/etc/hadoop/exclude state=touch owner=hduser group=hadoop
    when: is_master

  - name: create masters and slaves files in spark master node
    tags: ecoconfig
    template: "src={{item.src}} dest={{item.dest}} owner={{item.owner}} group={{item.group}}"
    with_items: 
      - { src: 'slaves.j2', dest: '/usr/local/spark/conf/slaves', owner: 'hduser', group: 'hadoop' }
    when: is_master 

  - name: create app/hadoop/tmp/namenode and datanode
    tags: postconfig
    file: "dest={{item.dest}} mode={{item.mode}} owner={{item.owner}} group={{item.group}} state={{item.state}}"
    with_items:
      - { dest: '/app/hadoop/tmp/namenode', mode: '750', owner: 'hduser', group: 'hadoop', state: 'directory' }
      - { dest: '/app/hadoop/tmp/datanode', mode: '750', owner: 'hduser', group: 'hadoop', state: 'directory' }

  - name: Install package for installation of psycopg2
    tags: hueconfig
    apt: pkg={{ item }} state=latest update_cache=yes
    with_items:
      - libpq-dev
      - python-dev
    when: is_master

  - name: Install psycopg2
    tags: hueconfig
    pip: name=psycopg2 state=present
    when: is_master

  - name: Install psycopg2 in Hue virtual env
    shell: sudo -u hduser {{ hue_home }}/build/env/bin/pip install psycopg2
    tags: hueconfig
    when: is_master

  - name: Edit pg_hba.conf, local to trust
    lineinfile: line="local\tall\t\tpostgres\t\t\t\ttrust" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=peer)" backrefs=yes
    tags: hueconfig
    when: is_master

  - name: Edit pg_hba.conf, host to trust
    lineinfile: line="host\tall\t\tall\t\t127.0.0.1/32\t\ttrust" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="host(\s)+all(\s)+all(\s)+127.0.0.1/32(\s)+(?=md5)" backrefs=yes
    tags: hueconfig
    when: is_master

  - name: Edit pg_hba.conf, add hduser
    lineinfile: line="host\thduser\t\thduser\t\t0.0.0.0/0\t\tmd5" dest=/etc/postgresql/9.4/main/pg_hba.conf
    tags: hueconfig
    when: is_master

  - name: Edit postgresql.conf
    lineinfile: line="listen_addresses = '0.0.0.0'" dest=/etc/postgresql/9.4/main/postgresql.conf
    tags: hueconfig
    when: is_master

  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: hueconfig
    when: is_master

  - name: Create PostgreSql user
    postgresql_user: name={{ eco_db_user }} password={{ eco_db_password }} role_attr_flags=CREATEDB,SUPERUSER,CREATEROLE
    tags: hueconfig
    when: is_master

  - name: Create PostgreSql database
    postgresql_db: name={{ hue_db_name }} owner={{ eco_db_user }}
    tags: hueconfig
    when: is_master

  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: hueconfig
    when: is_master

  - name: Hue project syncdb
    shell: sudo -u hduser ./hue syncdb --noinput chdir={{ hue_home }}/build/env/bin
    tags: hueconfig
    when: is_master

  - name: Hue project migrate
    shell: sudo -u hduser ./hue migrate chdir={{ hue_home }}/build/env/bin
    tags: hueconfig
    when: is_master

  - name: Revert pg_hba.conf, local to peer
    lineinfile: line="local\tall\t\tpostgres\t\t\t\tpeer" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=trust)" backrefs=yes
    tags: hueconfig
    when: is_master

  - name: Revert pg_hba.conf, host to md5
    lineinfile: line="host\tall\t\tall\t\t127.0.0.1/32\t\tmd5" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="host(\s)+all(\s)+all(\s)+127.0.0.1/32(\s)+(?=trust)" backrefs=yes
    tags: hueconfig
    when: is_master

  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: hueconfig
    when: is_master

  - name: Create folder zookeeper
    tags: ecoconfig
    file: path=/usr/local/zookeeper owner={{eco_db_user}} group=hadoop state=directory

  - name: Change ownership to hduser for all components
    tags: ecoconfig
    file: path={{item.path}} owner={{item.owner}} group={{item.group}} recurse=yes state=directory
    with_items:
      - { path: '{{hive_home}}', owner: '{{eco_db_user}}', group: 'hadoop' }
      - { path: '/usr/local/hbase/', owner: '{{eco_db_user}}', group: 'hadoop' }
      - { path: '/usr/local/oozie/', owner: '{{eco_db_user}}', group: 'hadoop' }
      - { path: '/usr/local/pig/', owner: '{{eco_db_user}}', group: 'hadoop' }
      - { path: '/usr/local/spark/', owner: '{{eco_db_user}}', group: 'hadoop' }

  - name: Edit pg_hba.conf, local to trust
    lineinfile: line="local\tall\t\tpostgres\t\t\t\ttrust" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=peer)" backrefs=yes
    tags: ecoconfig
    when: is_master

  - name: Edit pg_hba.conf, host to trust
    lineinfile: line="host\tall\t\tall\t\t127.0.0.1/32\t\ttrust" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="host(\s)+all(\s)+all(\s)+127.0.0.1/32(\s)+(?=md5)" backrefs=yes
    tags: ecoconfig
    when: is_master

  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: ecoconfig
    when: is_master

  - name: Create PostgreSql database for Hive
    tags: ecoconfig
    postgresql_db: name={{hive_db_name}} owner={{eco_db_user}}
    when: is_master

  - name: Run sql scripts
    tags: ecoconfig
    shell: sudo -u postgres psql -h localhost -U hduser -d metastore -f {{item}}
    with_items:
      - "{{hive_home}}/metastore/scripts/upgrade/postgres/hive-schema-1.1.0.postgres.sql"
      - "{{hive_home}}/metastore/scripts/upgrade/postgres/hive-txn-schema-0.13.0.postgres.sql"
    when: is_master

  - name: Copy hadoop xml files to oozie conf directory
    tags: ecoconfig
    shell: cp -rf {{hadoop_home}}/etc/hadoop/* {{path_to_hadoop}}/oozie/conf/hadoop-conf
    when: is_master

  - name: Create Oozie Database
    tags: ecoconfig
    action: command sudo -u hduser ./ooziedb.sh create -sqlfile oozie.sql -run chdir=/usr/local/oozie/bin/
    when: is_master

  - name: Revert pg_hba.conf, local to peer
    lineinfile: line="local\tall\t\tpostgres\t\t\t\tpeer" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=trust)" backrefs=yes
    tags: ecoconfig
    when: is_master

  - name: Revert pg_hba.conf, host to md5
    lineinfile: line="host\tall\t\tall\t\t127.0.0.1/32\t\tmd5" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="host(\s)+all(\s)+all(\s)+127.0.0.1/32(\s)+(?=trust)" backrefs=yes
    tags: ecoconfig
    when: is_master

  - name: Restart PostgreSql service
    service: name=postgresql state=restarted
    tags: ecoconfig
    when: is_master

  - name: Copy Ecosystem services to /etc/init.d
    tags: ecoconfig
    copy: "src={{item.src}} dest={{item.dest}} mode={{item.mode}}"
    with_items:
      - { src: 'hiveserver2', dest: '/etc/init.d/hiveserver2', mode: '0755' }
      - { src: 'hbaseserver', dest: '/etc/init.d/hbaseserver', mode: '0755' }
      - { src: 'livyserver', dest: '/etc/init.d/livyserver', mode: '0755' }
      - { src: 'oozieserver', dest: '/etc/init.d/oozieserver', mode: '0755' }
      - { src: 'hiveserver2.service', dest: '/lib/systemd/system/hiveserver2.service', mode: '644' }
      - { src: 'hbaseserver.service', dest: '/lib/systemd/system/hbaseserver.service', mode: '644' }
      - { src: 'livyserver.service', dest: '/lib/systemd/system/livyserver.service', mode: '644' }
      - { src: 'oozieserver.service', dest: '/lib/systemd/system/oozieserver.service', mode: '644' }
    when: is_master

  - name: Set password and username for hue superuser
    shell: echo 'from hue_login import set_user_pass; set_user_pass()' | ./hue shell chdir=/usr/local/hue/build/env/bin/
    tags: hueconfig
    when: is_master
