---
  - name: create directory for projects
    tags: preimage
    file: path={{my_project_dir}} state=directory

  - name: Create backup for settings.py file
    tags: update
    copy: src={{settings_path}}/settings.py dest=/tmp/settings.py

  - name: Git clone e-science project in the git directory
    tags:
     - preimage
     - update
    git: repo={{escience_repo}} depth=1 force=yes dest={{my_project_dir}}/{{my_project_name}} version={{escience_version|default(origin)}}

  - name: Copy Java dist directory in ansible folder for yarn role
    tags:
     - preimage
     - update
    command: cp -rf {{path_to_java_dirs}}/dist/ {{settings_path}}/ansible/roles/yarn/files

  - name: Copy Java lib directory in ansible folder for yarn role
    tags:
     - preimage
     - update
    command: cp -rf {{path_to_java_dirs}}/lib/ {{settings_path}}/ansible/roles/yarn/files

  - name: Copy Java dist directory in ansible folder for cloudera role
    tags:
     - preimage
     - update
    command: cp -rf {{path_to_java_dirs}}/dist/ {{settings_path}}/ansible/roles/cloudera/files

  - name: Copy Java lib directory in ansible folder for cloudera role
    tags:
     - preimage
     - update
    command: cp -rf {{path_to_java_dirs}}/lib/ {{settings_path}}/ansible/roles/cloudera/files

  - name: Copy correct settings.py
    tags: update
    copy: src=/tmp/settings.py dest={{settings_path}}/settings.py

  - name: Change owner of conf and logs
    file: path={{user_home}}/{{item}} recurse=yes state=directory
    tags: preimage
    with_items:
      - conf
      - logs

  - name: Copy uwsgi and celery daemon files to /etc/init.d
    tags:
     - postimage
     - restart
    sudo: yes
    copy: "src={{item.src}} dest={{item.dest}} mode={{item.mode}}"
    with_items:
      - { src: 'celery.sh', dest: '/etc/init.d/celery.sh', mode: '0755' }
      - { src: 'uwsgi.sh', dest: '/etc/init.d/uwsgi.sh', mode: '0755' }
      - { src: 'celery.service', dest: '/lib/systemd/system/celery.service', mode: '644' }
      - { src: 'uwsgi.service', dest: '/lib/systemd/system/uwsgi.service', mode: '644' }

  - name: Reload services files in systemd folder 
    tags:
     - postimage
     - restart
    sudo: yes
    shell: systemctl daemon-reload

  - name: Enable uwsgi and celery services after reboot
    tags:
     - postimage
     - restart
    sudo: yes
    shell: systemctl enable {{item}}
    with_items:
      - celery.service
      - uwsgi.service

  - name: create orka_admin user ssh keys
    user: name=orka_admin shell=/bin/bash generate_ssh_key=yes state=present
    tags: postimage

  - name: create root user ssh keys
    sudo: yes
    user: name=root shell=/bin/bash generate_ssh_key=yes state=present
    tags: postimage

  - name: Rabbitmq-server vhost configuration
    tags: postimage
    sudo: yes
    rabbitmq_vhost: name=/escience_tasks state=present

  - name: Rabbitmq-server user configuration
    tags: postimage
    sudo: yes
    rabbitmq_user: user=orkarbmq password=orkapass vhost=/escience_tasks configure_priv=.* read_priv=.* write_priv=.* state=present

  - name: Copy settings.j2 file
    tags: postimage
    template: src=settings.j2 owner=orka_admin mode=0744 dest={{settings_path}}/settings.py

  - name: Edit pg_hba.conf
    sudo: yes
    lineinfile: line="local\tall\t\tpostgres\t\t\t\ttrust" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=peer)" backrefs=yes
    tags: postimage

  - name: Restart PostgreSql service
    sudo: yes
    service: name=postgresql state=restarted
    tags: postimage

  - name: Create PostgreSql user
    sudo: yes
    postgresql_user: name={{db_user}} password={{db_password}} role_attr_flags=CREATEDB,NOSUPERUSER,NOCREATEROLE
    tags: postimage

  - name: Create PostgreSql database
    sudo: yes
    postgresql_db: name={{db_name}} owner={{db_user}}
    tags: postimage

  - name: Copy Orka database update sql file
    copy: src={{orka_db_sql_script}} dest={{my_project_dir}} owner=orka_admin mode=0744
    tags:
     - postimage
     - update

  - name: Django project syncdb
    django_manage: command=syncdb app_path={{project_path}}/{{webapp_dir}}
    tags: postimage

  - name: Django project migrate
    django_manage: command=migrate app_path={{project_path}}/{{webapp_dir}}
    tags: postimage

  - name: Run orka scripts for database update-insert predefined tables
    sudo: yes
    shell: sudo -u postgres PGPASSWORD={{db_password}} psql -h localhost -U {{db_user}} -d {{db_name}} -f {{my_project_dir}}/{{orka_db_sql_script}}
    tags:
     - postimage
     - update

  - name: Revert pg_hba.conf to default
    sudo: yes
    lineinfile: line="local\tall\t\tpostgres\t\t\t\tpeer" dest=/etc/postgresql/9.4/main/pg_hba.conf state=present regexp="local(\s)+all(\s)+postgres(\s)+(?=trust)" backrefs=yes
    tags: postimage

  - name: Restart PostgreSql service
    sudo: yes
    service: name=postgresql state=restarted
    tags: postimage

  - name: Create Django superuser
    shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('{{django_admin_name}}', '{{django_admin_email}}', '{{django_admin_password}}')" | python manage.py shell chdir={{my_project_dir}}/{{my_project_name}}/{{webapp_dir}}
    tags: postimage

  - name: Copy uwsgi.ini file
    tags: postimage
    copy: src=uwsgi.ini dest=./conf owner=orka_admin mode=0744

  - name: Copy nginx.conf file
    tags: postimage
    template: src=nginx.j2 dest=./conf owner=orka_admin

  - name: Rename nginx.j2 template to nginx.conf
    tags: postimage
    command: mv nginx.j2 nginx.conf chdir=./conf

  - name: Edit nginx.conf in /etc/nginx
    sudo: yes
    lineinfile: line="include {{user_home}}/conf/nginx.conf;" insertafter="http {" dest="/etc/nginx/nginx.conf"
    tags: postimage

  - name: Create directory ssl in /etc/nginx
    sudo: yes
    file: path=/etc/nginx/ssl state=directory
    tags: postimage

  - name: Create the SSL certificate
    sudo: yes
    command: openssl req -x509 -nodes -days {{certificate_key_lifetime}} -newkey rsa:{{key_rsa}} -sha256 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj "/C=GR/ST=Athens/L=Athens/O= /OU= /CN={{ ansible_ssh_host }}"
    tags: postimage

  - name: Stop Nginx service
    sudo: yes
    tags: restart
    service: name=nginx state=stopped

  - name: Stop uwsgi
    tags: restart
    sudo: yes
    shell: systemctl stop uwsgi

  - name: Stop celery
    tags: restart
    sudo: yes
    shell: systemctl stop celery

  - name: Stop rabbitmq
    tags: restart
    sudo: yes
    command: rabbitmqctl stop

  - name: Remove pyc files
    tags: restart
    shell: find . -name "*.pyc" -type f -delete

  - name: Remove static files
    tags: restart
    shell: find . -not -name "human.txt" -not -name ".gitignore" -type f -delete
    args:
      chdir: "{{project_path}}/{{webapp_dir}}/static"

  - name: Remove media files
    tags: restart
    shell: find . -not -name "human.txt" -not -name ".gitignore" -type f -delete
    args:
      chdir: "{{project_path}}/{{webapp_dir}}/media"

  - name: Restart rabbitmq
    tags: restart
    sudo: yes
    service: name=rabbitmq-server state=restarted

  - name: Restart Nginx service
    sudo: yes
    service: name=nginx state=restarted
    tags:
     - postimage
     - restart

  - name: Start uWSGI service
    sudo: yes
    tags:
     - postimage
     - restart
    shell: systemctl start uwsgi

  - name: Run collectstatic command
    tags:
     - postimage
     - restart
    django_manage: command=collectstatic app_path={{project_path}}/{{webapp_dir}}

  - name: Run celery as a daemon
    sudo: yes
    tags:
     - postimage
     - restart
    shell: systemctl start celery
